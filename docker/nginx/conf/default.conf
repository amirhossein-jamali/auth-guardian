server {
    # Send logs to stdout/stderr for Docker
    access_log /dev/stdout;
    error_log /dev/stderr;
    
    listen 8080;
    server_name _;
    
    # Redirect all HTTP requests to HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}

server {
    # Send logs to stdout/stderr for Docker
    access_log /dev/stdout;
    error_log /dev/stderr;
    
    # Standard HTTPS
    listen 8443 ssl;
    # Enable HTTP/2
    http2 on;
    # HTTP/3 (QUIC) support - newer syntax
    listen 8443 quic reuseport;
    
    # Add Alt-Svc header to advertise HTTP/3
    add_header Alt-Svc 'h3=":8443"; ma=86400' always;
    
    server_name _;

    # SSL configuration
    ssl_certificate /etc/nginx/ssl/server.crt;
    ssl_certificate_key /etc/nginx/ssl/server.key;
    
    # SSL settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-CHACHA20-POLY1305';
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off; # Disable TLS session tickets for better security
    
    # Disable ssl_stapling as it's causing issues
    # ssl_stapling on;
    # ssl_stapling_verify on;
    
    # OCSP stapling
    # ssl_trusted_certificate /etc/nginx/ssl/server.crt; # Use your CA certificate in production
    
    # Additional security headers (duplicating what Go app does)
    add_header Content-Security-Policy "default-src 'self'" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-Frame-Options "DENY" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    
    # Root path for static files (optional)
    location = / {
        return 200 "Auth Guardian API is running!";
        add_header Content-Type text/plain;
    }
    
    # Health check endpoint 
    location = /health {
        return 200 '{"status":"ok"}';
        add_header Content-Type application/json;
    }
    
    # API endpoints - proxy to Go application
    location / {
        proxy_pass http://api:8080;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket support (if needed)
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }
} 