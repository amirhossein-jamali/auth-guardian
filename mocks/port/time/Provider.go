// Code generated by mockery. DO NOT EDIT.

package time

import (
	context "context"

	porttime "github.com/amirhossein-jamali/auth-guardian/internal/domain/port/time"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockProvider is an autogenerated mock type for the Provider type
type MockProvider struct {
	mock.Mock
}

type MockProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProvider) EXPECT() *MockProvider_Expecter {
	return &MockProvider_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: t, d
func (_m *MockProvider) Add(t time.Time, d time.Duration) time.Time {
	ret := _m.Called(t, d)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 time.Time
	if rf, ok := ret.Get(0).(func(time.Time, time.Duration) time.Time); ok {
		r0 = rf(t, d)
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// MockProvider_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockProvider_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - t time.Time
//   - d time.Duration
func (_e *MockProvider_Expecter) Add(t interface{}, d interface{}) *MockProvider_Add_Call {
	return &MockProvider_Add_Call{Call: _e.mock.On("Add", t, d)}
}

func (_c *MockProvider_Add_Call) Run(run func(t time.Time, d time.Duration)) *MockProvider_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Time), args[1].(time.Duration))
	})
	return _c
}

func (_c *MockProvider_Add_Call) Return(_a0 time.Time) *MockProvider_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProvider_Add_Call) RunAndReturn(run func(time.Time, time.Duration) time.Time) *MockProvider_Add_Call {
	_c.Call.Return(run)
	return _c
}

// Now provides a mock function with no fields
func (_m *MockProvider) Now() time.Time {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Now")
	}

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// MockProvider_Now_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Now'
type MockProvider_Now_Call struct {
	*mock.Call
}

// Now is a helper method to define mock.On call
func (_e *MockProvider_Expecter) Now() *MockProvider_Now_Call {
	return &MockProvider_Now_Call{Call: _e.mock.On("Now")}
}

func (_c *MockProvider_Now_Call) Run(run func()) *MockProvider_Now_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockProvider_Now_Call) Return(_a0 time.Time) *MockProvider_Now_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProvider_Now_Call) RunAndReturn(run func() time.Time) *MockProvider_Now_Call {
	_c.Call.Return(run)
	return _c
}

// ParseDuration provides a mock function with given fields: s
func (_m *MockProvider) ParseDuration(s string) (porttime.Duration, error) {
	ret := _m.Called(s)

	if len(ret) == 0 {
		panic("no return value specified for ParseDuration")
	}

	var r0 porttime.Duration
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (porttime.Duration, error)); ok {
		return rf(s)
	}
	if rf, ok := ret.Get(0).(func(string) porttime.Duration); ok {
		r0 = rf(s)
	} else {
		r0 = ret.Get(0).(porttime.Duration)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(s)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProvider_ParseDuration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseDuration'
type MockProvider_ParseDuration_Call struct {
	*mock.Call
}

// ParseDuration is a helper method to define mock.On call
//   - s string
func (_e *MockProvider_Expecter) ParseDuration(s interface{}) *MockProvider_ParseDuration_Call {
	return &MockProvider_ParseDuration_Call{Call: _e.mock.On("ParseDuration", s)}
}

func (_c *MockProvider_ParseDuration_Call) Run(run func(s string)) *MockProvider_ParseDuration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockProvider_ParseDuration_Call) Return(_a0 porttime.Duration, _a1 error) *MockProvider_ParseDuration_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProvider_ParseDuration_Call) RunAndReturn(run func(string) (porttime.Duration, error)) *MockProvider_ParseDuration_Call {
	_c.Call.Return(run)
	return _c
}

// Since provides a mock function with given fields: t
func (_m *MockProvider) Since(t time.Time) time.Duration {
	ret := _m.Called(t)

	if len(ret) == 0 {
		panic("no return value specified for Since")
	}

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func(time.Time) time.Duration); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// MockProvider_Since_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Since'
type MockProvider_Since_Call struct {
	*mock.Call
}

// Since is a helper method to define mock.On call
//   - t time.Time
func (_e *MockProvider_Expecter) Since(t interface{}) *MockProvider_Since_Call {
	return &MockProvider_Since_Call{Call: _e.mock.On("Since", t)}
}

func (_c *MockProvider_Since_Call) Run(run func(t time.Time)) *MockProvider_Since_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Time))
	})
	return _c
}

func (_c *MockProvider_Since_Call) Return(_a0 time.Duration) *MockProvider_Since_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProvider_Since_Call) RunAndReturn(run func(time.Time) time.Duration) *MockProvider_Since_Call {
	_c.Call.Return(run)
	return _c
}

// Sleep provides a mock function with given fields: d
func (_m *MockProvider) Sleep(d time.Duration) {
	_m.Called(d)
}

// MockProvider_Sleep_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sleep'
type MockProvider_Sleep_Call struct {
	*mock.Call
}

// Sleep is a helper method to define mock.On call
//   - d time.Duration
func (_e *MockProvider_Expecter) Sleep(d interface{}) *MockProvider_Sleep_Call {
	return &MockProvider_Sleep_Call{Call: _e.mock.On("Sleep", d)}
}

func (_c *MockProvider_Sleep_Call) Run(run func(d time.Duration)) *MockProvider_Sleep_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Duration))
	})
	return _c
}

func (_c *MockProvider_Sleep_Call) Return() *MockProvider_Sleep_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockProvider_Sleep_Call) RunAndReturn(run func(time.Duration)) *MockProvider_Sleep_Call {
	_c.Run(run)
	return _c
}

// Until provides a mock function with given fields: t
func (_m *MockProvider) Until(t time.Time) time.Duration {
	ret := _m.Called(t)

	if len(ret) == 0 {
		panic("no return value specified for Until")
	}

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func(time.Time) time.Duration); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// MockProvider_Until_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Until'
type MockProvider_Until_Call struct {
	*mock.Call
}

// Until is a helper method to define mock.On call
//   - t time.Time
func (_e *MockProvider_Expecter) Until(t interface{}) *MockProvider_Until_Call {
	return &MockProvider_Until_Call{Call: _e.mock.On("Until", t)}
}

func (_c *MockProvider_Until_Call) Run(run func(t time.Time)) *MockProvider_Until_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Time))
	})
	return _c
}

func (_c *MockProvider_Until_Call) Return(_a0 time.Duration) *MockProvider_Until_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProvider_Until_Call) RunAndReturn(run func(time.Time) time.Duration) *MockProvider_Until_Call {
	_c.Call.Return(run)
	return _c
}

// WithTimeout provides a mock function with given fields: ctx, timeout
func (_m *MockProvider) WithTimeout(ctx context.Context, timeout time.Duration) (context.Context, context.CancelFunc) {
	ret := _m.Called(ctx, timeout)

	if len(ret) == 0 {
		panic("no return value specified for WithTimeout")
	}

	var r0 context.Context
	var r1 context.CancelFunc
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration) (context.Context, context.CancelFunc)); ok {
		return rf(ctx, timeout)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration) context.Context); ok {
		r0 = rf(ctx, timeout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Duration) context.CancelFunc); ok {
		r1 = rf(ctx, timeout)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(context.CancelFunc)
		}
	}

	return r0, r1
}

// MockProvider_WithTimeout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithTimeout'
type MockProvider_WithTimeout_Call struct {
	*mock.Call
}

// WithTimeout is a helper method to define mock.On call
//   - ctx context.Context
//   - timeout time.Duration
func (_e *MockProvider_Expecter) WithTimeout(ctx interface{}, timeout interface{}) *MockProvider_WithTimeout_Call {
	return &MockProvider_WithTimeout_Call{Call: _e.mock.On("WithTimeout", ctx, timeout)}
}

func (_c *MockProvider_WithTimeout_Call) Run(run func(ctx context.Context, timeout time.Duration)) *MockProvider_WithTimeout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Duration))
	})
	return _c
}

func (_c *MockProvider_WithTimeout_Call) Return(_a0 context.Context, _a1 context.CancelFunc) *MockProvider_WithTimeout_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProvider_WithTimeout_Call) RunAndReturn(run func(context.Context, time.Duration) (context.Context, context.CancelFunc)) *MockProvider_WithTimeout_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProvider creates a new instance of MockProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProvider {
	mock := &MockProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
