// Code generated by mockery. DO NOT EDIT.

package risk

import (
	context "context"

	risk "github.com/amirhossein-jamali/auth-guardian/internal/domain/port/risk"
	mock "github.com/stretchr/testify/mock"
)

// MockRiskEvaluator is an autogenerated mock type for the RiskEvaluator type
type MockRiskEvaluator struct {
	mock.Mock
}

type MockRiskEvaluator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRiskEvaluator) EXPECT() *MockRiskEvaluator_Expecter {
	return &MockRiskEvaluator_Expecter{mock: &_m.Mock}
}

// EvaluateLoginRisk provides a mock function with given fields: ctx, factors
func (_m *MockRiskEvaluator) EvaluateLoginRisk(ctx context.Context, factors risk.LoginRiskFactors) (risk.Level, error) {
	ret := _m.Called(ctx, factors)

	if len(ret) == 0 {
		panic("no return value specified for EvaluateLoginRisk")
	}

	var r0 risk.Level
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, risk.LoginRiskFactors) (risk.Level, error)); ok {
		return rf(ctx, factors)
	}
	if rf, ok := ret.Get(0).(func(context.Context, risk.LoginRiskFactors) risk.Level); ok {
		r0 = rf(ctx, factors)
	} else {
		r0 = ret.Get(0).(risk.Level)
	}

	if rf, ok := ret.Get(1).(func(context.Context, risk.LoginRiskFactors) error); ok {
		r1 = rf(ctx, factors)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRiskEvaluator_EvaluateLoginRisk_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EvaluateLoginRisk'
type MockRiskEvaluator_EvaluateLoginRisk_Call struct {
	*mock.Call
}

// EvaluateLoginRisk is a helper method to define mock.On call
//   - ctx context.Context
//   - factors risk.LoginRiskFactors
func (_e *MockRiskEvaluator_Expecter) EvaluateLoginRisk(ctx interface{}, factors interface{}) *MockRiskEvaluator_EvaluateLoginRisk_Call {
	return &MockRiskEvaluator_EvaluateLoginRisk_Call{Call: _e.mock.On("EvaluateLoginRisk", ctx, factors)}
}

func (_c *MockRiskEvaluator_EvaluateLoginRisk_Call) Run(run func(ctx context.Context, factors risk.LoginRiskFactors)) *MockRiskEvaluator_EvaluateLoginRisk_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(risk.LoginRiskFactors))
	})
	return _c
}

func (_c *MockRiskEvaluator_EvaluateLoginRisk_Call) Return(_a0 risk.Level, _a1 error) *MockRiskEvaluator_EvaluateLoginRisk_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRiskEvaluator_EvaluateLoginRisk_Call) RunAndReturn(run func(context.Context, risk.LoginRiskFactors) (risk.Level, error)) *MockRiskEvaluator_EvaluateLoginRisk_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRiskEvaluator creates a new instance of MockRiskEvaluator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRiskEvaluator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRiskEvaluator {
	mock := &MockRiskEvaluator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
