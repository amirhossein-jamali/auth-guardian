// Code generated by mockery. DO NOT EDIT.

package logger

import (
	logger "github.com/amirhossein-jamali/auth-guardian/internal/domain/port/logger"
	mock "github.com/stretchr/testify/mock"
)

// MockLogger is an autogenerated mock type for the Logger type
type MockLogger struct {
	mock.Mock
}

type MockLogger_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLogger) EXPECT() *MockLogger_Expecter {
	return &MockLogger_Expecter{mock: &_m.Mock}
}

// Debug provides a mock function with given fields: message, fields
func (_m *MockLogger) Debug(message string, fields map[string]any) {
	_m.Called(message, fields)
}

// MockLogger_Debug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Debug'
type MockLogger_Debug_Call struct {
	*mock.Call
}

// Debug is a helper method to define mock.On call
//   - message string
//   - fields map[string]any
func (_e *MockLogger_Expecter) Debug(message interface{}, fields interface{}) *MockLogger_Debug_Call {
	return &MockLogger_Debug_Call{Call: _e.mock.On("Debug", message, fields)}
}

func (_c *MockLogger_Debug_Call) Run(run func(message string, fields map[string]any)) *MockLogger_Debug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(map[string]any))
	})
	return _c
}

func (_c *MockLogger_Debug_Call) Return() *MockLogger_Debug_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Debug_Call) RunAndReturn(run func(string, map[string]any)) *MockLogger_Debug_Call {
	_c.Run(run)
	return _c
}

// Error provides a mock function with given fields: message, fields
func (_m *MockLogger) Error(message string, fields map[string]any) {
	_m.Called(message, fields)
}

// MockLogger_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type MockLogger_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
//   - message string
//   - fields map[string]any
func (_e *MockLogger_Expecter) Error(message interface{}, fields interface{}) *MockLogger_Error_Call {
	return &MockLogger_Error_Call{Call: _e.mock.On("Error", message, fields)}
}

func (_c *MockLogger_Error_Call) Run(run func(message string, fields map[string]any)) *MockLogger_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(map[string]any))
	})
	return _c
}

func (_c *MockLogger_Error_Call) Return() *MockLogger_Error_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Error_Call) RunAndReturn(run func(string, map[string]any)) *MockLogger_Error_Call {
	_c.Run(run)
	return _c
}

// GetLevel provides a mock function with no fields
func (_m *MockLogger) GetLevel() logger.LogLevel {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLevel")
	}

	var r0 logger.LogLevel
	if rf, ok := ret.Get(0).(func() logger.LogLevel); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(logger.LogLevel)
	}

	return r0
}

// MockLogger_GetLevel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLevel'
type MockLogger_GetLevel_Call struct {
	*mock.Call
}

// GetLevel is a helper method to define mock.On call
func (_e *MockLogger_Expecter) GetLevel() *MockLogger_GetLevel_Call {
	return &MockLogger_GetLevel_Call{Call: _e.mock.On("GetLevel")}
}

func (_c *MockLogger_GetLevel_Call) Run(run func()) *MockLogger_GetLevel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLogger_GetLevel_Call) Return(_a0 logger.LogLevel) *MockLogger_GetLevel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLogger_GetLevel_Call) RunAndReturn(run func() logger.LogLevel) *MockLogger_GetLevel_Call {
	_c.Call.Return(run)
	return _c
}

// Info provides a mock function with given fields: message, fields
func (_m *MockLogger) Info(message string, fields map[string]any) {
	_m.Called(message, fields)
}

// MockLogger_Info_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type MockLogger_Info_Call struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
//   - message string
//   - fields map[string]any
func (_e *MockLogger_Expecter) Info(message interface{}, fields interface{}) *MockLogger_Info_Call {
	return &MockLogger_Info_Call{Call: _e.mock.On("Info", message, fields)}
}

func (_c *MockLogger_Info_Call) Run(run func(message string, fields map[string]any)) *MockLogger_Info_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(map[string]any))
	})
	return _c
}

func (_c *MockLogger_Info_Call) Return() *MockLogger_Info_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Info_Call) RunAndReturn(run func(string, map[string]any)) *MockLogger_Info_Call {
	_c.Run(run)
	return _c
}

// SetLevel provides a mock function with given fields: level
func (_m *MockLogger) SetLevel(level logger.LogLevel) {
	_m.Called(level)
}

// MockLogger_SetLevel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLevel'
type MockLogger_SetLevel_Call struct {
	*mock.Call
}

// SetLevel is a helper method to define mock.On call
//   - level logger.LogLevel
func (_e *MockLogger_Expecter) SetLevel(level interface{}) *MockLogger_SetLevel_Call {
	return &MockLogger_SetLevel_Call{Call: _e.mock.On("SetLevel", level)}
}

func (_c *MockLogger_SetLevel_Call) Run(run func(level logger.LogLevel)) *MockLogger_SetLevel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(logger.LogLevel))
	})
	return _c
}

func (_c *MockLogger_SetLevel_Call) Return() *MockLogger_SetLevel_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_SetLevel_Call) RunAndReturn(run func(logger.LogLevel)) *MockLogger_SetLevel_Call {
	_c.Run(run)
	return _c
}

// Warn provides a mock function with given fields: message, fields
func (_m *MockLogger) Warn(message string, fields map[string]any) {
	_m.Called(message, fields)
}

// MockLogger_Warn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Warn'
type MockLogger_Warn_Call struct {
	*mock.Call
}

// Warn is a helper method to define mock.On call
//   - message string
//   - fields map[string]any
func (_e *MockLogger_Expecter) Warn(message interface{}, fields interface{}) *MockLogger_Warn_Call {
	return &MockLogger_Warn_Call{Call: _e.mock.On("Warn", message, fields)}
}

func (_c *MockLogger_Warn_Call) Run(run func(message string, fields map[string]any)) *MockLogger_Warn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(map[string]any))
	})
	return _c
}

func (_c *MockLogger_Warn_Call) Return() *MockLogger_Warn_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Warn_Call) RunAndReturn(run func(string, map[string]any)) *MockLogger_Warn_Call {
	_c.Run(run)
	return _c
}

// NewMockLogger creates a new instance of MockLogger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLogger {
	mock := &MockLogger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
