// Code generated by mockery. DO NOT EDIT.

package storage

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockRateLimiter is an autogenerated mock type for the RateLimiter type
type MockRateLimiter struct {
	mock.Mock
}

type MockRateLimiter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRateLimiter) EXPECT() *MockRateLimiter_Expecter {
	return &MockRateLimiter_Expecter{mock: &_m.Mock}
}

// Allow provides a mock function with given fields: ctx, key, rate, window
func (_m *MockRateLimiter) Allow(ctx context.Context, key string, rate int, window time.Duration) (bool, error) {
	ret := _m.Called(ctx, key, rate, window)

	if len(ret) == 0 {
		panic("no return value specified for Allow")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, time.Duration) (bool, error)); ok {
		return rf(ctx, key, rate, window)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, time.Duration) bool); ok {
		r0 = rf(ctx, key, rate, window)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, time.Duration) error); ok {
		r1 = rf(ctx, key, rate, window)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRateLimiter_Allow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Allow'
type MockRateLimiter_Allow_Call struct {
	*mock.Call
}

// Allow is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - rate int
//   - window time.Duration
func (_e *MockRateLimiter_Expecter) Allow(ctx interface{}, key interface{}, rate interface{}, window interface{}) *MockRateLimiter_Allow_Call {
	return &MockRateLimiter_Allow_Call{Call: _e.mock.On("Allow", ctx, key, rate, window)}
}

func (_c *MockRateLimiter_Allow_Call) Run(run func(ctx context.Context, key string, rate int, window time.Duration)) *MockRateLimiter_Allow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int), args[3].(time.Duration))
	})
	return _c
}

func (_c *MockRateLimiter_Allow_Call) Return(_a0 bool, _a1 error) *MockRateLimiter_Allow_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRateLimiter_Allow_Call) RunAndReturn(run func(context.Context, string, int, time.Duration) (bool, error)) *MockRateLimiter_Allow_Call {
	_c.Call.Return(run)
	return _c
}

// GetRemaining provides a mock function with given fields: ctx, key, rate
func (_m *MockRateLimiter) GetRemaining(ctx context.Context, key string, rate int) (int, error) {
	ret := _m.Called(ctx, key, rate)

	if len(ret) == 0 {
		panic("no return value specified for GetRemaining")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) (int, error)); ok {
		return rf(ctx, key, rate)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int) int); ok {
		r0 = rf(ctx, key, rate)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int) error); ok {
		r1 = rf(ctx, key, rate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRateLimiter_GetRemaining_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRemaining'
type MockRateLimiter_GetRemaining_Call struct {
	*mock.Call
}

// GetRemaining is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - rate int
func (_e *MockRateLimiter_Expecter) GetRemaining(ctx interface{}, key interface{}, rate interface{}) *MockRateLimiter_GetRemaining_Call {
	return &MockRateLimiter_GetRemaining_Call{Call: _e.mock.On("GetRemaining", ctx, key, rate)}
}

func (_c *MockRateLimiter_GetRemaining_Call) Run(run func(ctx context.Context, key string, rate int)) *MockRateLimiter_GetRemaining_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int))
	})
	return _c
}

func (_c *MockRateLimiter_GetRemaining_Call) Return(_a0 int, _a1 error) *MockRateLimiter_GetRemaining_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRateLimiter_GetRemaining_Call) RunAndReturn(run func(context.Context, string, int) (int, error)) *MockRateLimiter_GetRemaining_Call {
	_c.Call.Return(run)
	return _c
}

// GetTTL provides a mock function with given fields: ctx, key
func (_m *MockRateLimiter) GetTTL(ctx context.Context, key string) (time.Duration, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for GetTTL")
	}

	var r0 time.Duration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (time.Duration, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) time.Duration); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRateLimiter_GetTTL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTTL'
type MockRateLimiter_GetTTL_Call struct {
	*mock.Call
}

// GetTTL is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockRateLimiter_Expecter) GetTTL(ctx interface{}, key interface{}) *MockRateLimiter_GetTTL_Call {
	return &MockRateLimiter_GetTTL_Call{Call: _e.mock.On("GetTTL", ctx, key)}
}

func (_c *MockRateLimiter_GetTTL_Call) Run(run func(ctx context.Context, key string)) *MockRateLimiter_GetTTL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRateLimiter_GetTTL_Call) Return(_a0 time.Duration, _a1 error) *MockRateLimiter_GetTTL_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRateLimiter_GetTTL_Call) RunAndReturn(run func(context.Context, string) (time.Duration, error)) *MockRateLimiter_GetTTL_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRateLimiter creates a new instance of MockRateLimiter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRateLimiter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRateLimiter {
	mock := &MockRateLimiter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
