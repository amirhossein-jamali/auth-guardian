// Code generated by mockery. DO NOT EDIT.

package token

import mock "github.com/stretchr/testify/mock"

// MockTokenService is an autogenerated mock type for the TokenService type
type MockTokenService struct {
	mock.Mock
}

type MockTokenService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTokenService) EXPECT() *MockTokenService_Expecter {
	return &MockTokenService_Expecter{mock: &_m.Mock}
}

// GenerateTokens provides a mock function with given fields: userID
func (_m *MockTokenService) GenerateTokens(userID string) (string, string, int64, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GenerateTokens")
	}

	var r0 string
	var r1 string
	var r2 int64
	var r3 error
	if rf, ok := ret.Get(0).(func(string) (string, string, int64, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string) int64); ok {
		r2 = rf(userID)
	} else {
		r2 = ret.Get(2).(int64)
	}

	if rf, ok := ret.Get(3).(func(string) error); ok {
		r3 = rf(userID)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// MockTokenService_GenerateTokens_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateTokens'
type MockTokenService_GenerateTokens_Call struct {
	*mock.Call
}

// GenerateTokens is a helper method to define mock.On call
//   - userID string
func (_e *MockTokenService_Expecter) GenerateTokens(userID interface{}) *MockTokenService_GenerateTokens_Call {
	return &MockTokenService_GenerateTokens_Call{Call: _e.mock.On("GenerateTokens", userID)}
}

func (_c *MockTokenService_GenerateTokens_Call) Run(run func(userID string)) *MockTokenService_GenerateTokens_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockTokenService_GenerateTokens_Call) Return(accessToken string, refreshToken string, expiresAt int64, err error) *MockTokenService_GenerateTokens_Call {
	_c.Call.Return(accessToken, refreshToken, expiresAt, err)
	return _c
}

func (_c *MockTokenService_GenerateTokens_Call) RunAndReturn(run func(string) (string, string, int64, error)) *MockTokenService_GenerateTokens_Call {
	_c.Call.Return(run)
	return _c
}

// IsTokenRevoked provides a mock function with given fields: _a0
func (_m *MockTokenService) IsTokenRevoked(_a0 string) (bool, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for IsTokenRevoked")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTokenService_IsTokenRevoked_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsTokenRevoked'
type MockTokenService_IsTokenRevoked_Call struct {
	*mock.Call
}

// IsTokenRevoked is a helper method to define mock.On call
//   - _a0 string
func (_e *MockTokenService_Expecter) IsTokenRevoked(_a0 interface{}) *MockTokenService_IsTokenRevoked_Call {
	return &MockTokenService_IsTokenRevoked_Call{Call: _e.mock.On("IsTokenRevoked", _a0)}
}

func (_c *MockTokenService_IsTokenRevoked_Call) Run(run func(_a0 string)) *MockTokenService_IsTokenRevoked_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockTokenService_IsTokenRevoked_Call) Return(_a0 bool, _a1 error) *MockTokenService_IsTokenRevoked_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTokenService_IsTokenRevoked_Call) RunAndReturn(run func(string) (bool, error)) *MockTokenService_IsTokenRevoked_Call {
	_c.Call.Return(run)
	return _c
}

// RevokeToken provides a mock function with given fields: _a0
func (_m *MockTokenService) RevokeToken(_a0 string) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for RevokeToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTokenService_RevokeToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokeToken'
type MockTokenService_RevokeToken_Call struct {
	*mock.Call
}

// RevokeToken is a helper method to define mock.On call
//   - _a0 string
func (_e *MockTokenService_Expecter) RevokeToken(_a0 interface{}) *MockTokenService_RevokeToken_Call {
	return &MockTokenService_RevokeToken_Call{Call: _e.mock.On("RevokeToken", _a0)}
}

func (_c *MockTokenService_RevokeToken_Call) Run(run func(_a0 string)) *MockTokenService_RevokeToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockTokenService_RevokeToken_Call) Return(_a0 error) *MockTokenService_RevokeToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTokenService_RevokeToken_Call) RunAndReturn(run func(string) error) *MockTokenService_RevokeToken_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateAccessToken provides a mock function with given fields: _a0
func (_m *MockTokenService) ValidateAccessToken(_a0 string) (string, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ValidateAccessToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTokenService_ValidateAccessToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateAccessToken'
type MockTokenService_ValidateAccessToken_Call struct {
	*mock.Call
}

// ValidateAccessToken is a helper method to define mock.On call
//   - _a0 string
func (_e *MockTokenService_Expecter) ValidateAccessToken(_a0 interface{}) *MockTokenService_ValidateAccessToken_Call {
	return &MockTokenService_ValidateAccessToken_Call{Call: _e.mock.On("ValidateAccessToken", _a0)}
}

func (_c *MockTokenService_ValidateAccessToken_Call) Run(run func(_a0 string)) *MockTokenService_ValidateAccessToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockTokenService_ValidateAccessToken_Call) Return(userID string, err error) *MockTokenService_ValidateAccessToken_Call {
	_c.Call.Return(userID, err)
	return _c
}

func (_c *MockTokenService_ValidateAccessToken_Call) RunAndReturn(run func(string) (string, error)) *MockTokenService_ValidateAccessToken_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateRefreshToken provides a mock function with given fields: _a0
func (_m *MockTokenService) ValidateRefreshToken(_a0 string) (string, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ValidateRefreshToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTokenService_ValidateRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateRefreshToken'
type MockTokenService_ValidateRefreshToken_Call struct {
	*mock.Call
}

// ValidateRefreshToken is a helper method to define mock.On call
//   - _a0 string
func (_e *MockTokenService_Expecter) ValidateRefreshToken(_a0 interface{}) *MockTokenService_ValidateRefreshToken_Call {
	return &MockTokenService_ValidateRefreshToken_Call{Call: _e.mock.On("ValidateRefreshToken", _a0)}
}

func (_c *MockTokenService_ValidateRefreshToken_Call) Run(run func(_a0 string)) *MockTokenService_ValidateRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockTokenService_ValidateRefreshToken_Call) Return(userID string, err error) *MockTokenService_ValidateRefreshToken_Call {
	_c.Call.Return(userID, err)
	return _c
}

func (_c *MockTokenService_ValidateRefreshToken_Call) RunAndReturn(run func(string) (string, error)) *MockTokenService_ValidateRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTokenService creates a new instance of MockTokenService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTokenService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTokenService {
	mock := &MockTokenService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
