// Code generated by mockery. DO NOT EDIT.

package token

import mock "github.com/stretchr/testify/mock"

// MockTokenStore is an autogenerated mock type for the TokenStore type
type MockTokenStore struct {
	mock.Mock
}

type MockTokenStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTokenStore) EXPECT() *MockTokenStore_Expecter {
	return &MockTokenStore_Expecter{mock: &_m.Mock}
}

// GetUserIDByToken provides a mock function with given fields: tokenID
func (_m *MockTokenStore) GetUserIDByToken(tokenID string) (string, error) {
	ret := _m.Called(tokenID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserIDByToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(tokenID)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(tokenID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tokenID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTokenStore_GetUserIDByToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserIDByToken'
type MockTokenStore_GetUserIDByToken_Call struct {
	*mock.Call
}

// GetUserIDByToken is a helper method to define mock.On call
//   - tokenID string
func (_e *MockTokenStore_Expecter) GetUserIDByToken(tokenID interface{}) *MockTokenStore_GetUserIDByToken_Call {
	return &MockTokenStore_GetUserIDByToken_Call{Call: _e.mock.On("GetUserIDByToken", tokenID)}
}

func (_c *MockTokenStore_GetUserIDByToken_Call) Run(run func(tokenID string)) *MockTokenStore_GetUserIDByToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockTokenStore_GetUserIDByToken_Call) Return(_a0 string, _a1 error) *MockTokenStore_GetUserIDByToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTokenStore_GetUserIDByToken_Call) RunAndReturn(run func(string) (string, error)) *MockTokenStore_GetUserIDByToken_Call {
	_c.Call.Return(run)
	return _c
}

// IsTokenRevoked provides a mock function with given fields: tokenID
func (_m *MockTokenStore) IsTokenRevoked(tokenID string) (bool, error) {
	ret := _m.Called(tokenID)

	if len(ret) == 0 {
		panic("no return value specified for IsTokenRevoked")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(tokenID)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(tokenID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tokenID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTokenStore_IsTokenRevoked_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsTokenRevoked'
type MockTokenStore_IsTokenRevoked_Call struct {
	*mock.Call
}

// IsTokenRevoked is a helper method to define mock.On call
//   - tokenID string
func (_e *MockTokenStore_Expecter) IsTokenRevoked(tokenID interface{}) *MockTokenStore_IsTokenRevoked_Call {
	return &MockTokenStore_IsTokenRevoked_Call{Call: _e.mock.On("IsTokenRevoked", tokenID)}
}

func (_c *MockTokenStore_IsTokenRevoked_Call) Run(run func(tokenID string)) *MockTokenStore_IsTokenRevoked_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockTokenStore_IsTokenRevoked_Call) Return(_a0 bool, _a1 error) *MockTokenStore_IsTokenRevoked_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTokenStore_IsTokenRevoked_Call) RunAndReturn(run func(string) (bool, error)) *MockTokenStore_IsTokenRevoked_Call {
	_c.Call.Return(run)
	return _c
}

// RevokeToken provides a mock function with given fields: tokenID
func (_m *MockTokenStore) RevokeToken(tokenID string) error {
	ret := _m.Called(tokenID)

	if len(ret) == 0 {
		panic("no return value specified for RevokeToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(tokenID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTokenStore_RevokeToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokeToken'
type MockTokenStore_RevokeToken_Call struct {
	*mock.Call
}

// RevokeToken is a helper method to define mock.On call
//   - tokenID string
func (_e *MockTokenStore_Expecter) RevokeToken(tokenID interface{}) *MockTokenStore_RevokeToken_Call {
	return &MockTokenStore_RevokeToken_Call{Call: _e.mock.On("RevokeToken", tokenID)}
}

func (_c *MockTokenStore_RevokeToken_Call) Run(run func(tokenID string)) *MockTokenStore_RevokeToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockTokenStore_RevokeToken_Call) Return(_a0 error) *MockTokenStore_RevokeToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTokenStore_RevokeToken_Call) RunAndReturn(run func(string) error) *MockTokenStore_RevokeToken_Call {
	_c.Call.Return(run)
	return _c
}

// StoreToken provides a mock function with given fields: tokenID, userID, expiresAt
func (_m *MockTokenStore) StoreToken(tokenID string, userID string, expiresAt int64) error {
	ret := _m.Called(tokenID, userID, expiresAt)

	if len(ret) == 0 {
		panic("no return value specified for StoreToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, int64) error); ok {
		r0 = rf(tokenID, userID, expiresAt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTokenStore_StoreToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StoreToken'
type MockTokenStore_StoreToken_Call struct {
	*mock.Call
}

// StoreToken is a helper method to define mock.On call
//   - tokenID string
//   - userID string
//   - expiresAt int64
func (_e *MockTokenStore_Expecter) StoreToken(tokenID interface{}, userID interface{}, expiresAt interface{}) *MockTokenStore_StoreToken_Call {
	return &MockTokenStore_StoreToken_Call{Call: _e.mock.On("StoreToken", tokenID, userID, expiresAt)}
}

func (_c *MockTokenStore_StoreToken_Call) Run(run func(tokenID string, userID string, expiresAt int64)) *MockTokenStore_StoreToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(int64))
	})
	return _c
}

func (_c *MockTokenStore_StoreToken_Call) Return(_a0 error) *MockTokenStore_StoreToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTokenStore_StoreToken_Call) RunAndReturn(run func(string, string, int64) error) *MockTokenStore_StoreToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTokenStore creates a new instance of MockTokenStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTokenStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTokenStore {
	mock := &MockTokenStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
