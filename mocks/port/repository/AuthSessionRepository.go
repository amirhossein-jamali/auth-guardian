// Code generated by mockery. DO NOT EDIT.

package repository

import (
	context "context"

	entity "github.com/amirhossein-jamali/auth-guardian/internal/domain/entity"
	mock "github.com/stretchr/testify/mock"

	repository "github.com/amirhossein-jamali/auth-guardian/internal/domain/port/repository"

	time "time"
)

// MockAuthSessionRepository is an autogenerated mock type for the AuthSessionRepository type
type MockAuthSessionRepository struct {
	mock.Mock
}

type MockAuthSessionRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthSessionRepository) EXPECT() *MockAuthSessionRepository_Expecter {
	return &MockAuthSessionRepository_Expecter{mock: &_m.Mock}
}

// BatchDeleteExpired provides a mock function with given fields: ctx, before, batchSize
func (_m *MockAuthSessionRepository) BatchDeleteExpired(ctx context.Context, before time.Time, batchSize int) (int64, error) {
	ret := _m.Called(ctx, before, batchSize)

	if len(ret) == 0 {
		panic("no return value specified for BatchDeleteExpired")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, int) (int64, error)); ok {
		return rf(ctx, before, batchSize)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, int) int64); ok {
		r0 = rf(ctx, before, batchSize)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Time, int) error); ok {
		r1 = rf(ctx, before, batchSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthSessionRepository_BatchDeleteExpired_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchDeleteExpired'
type MockAuthSessionRepository_BatchDeleteExpired_Call struct {
	*mock.Call
}

// BatchDeleteExpired is a helper method to define mock.On call
//   - ctx context.Context
//   - before time.Time
//   - batchSize int
func (_e *MockAuthSessionRepository_Expecter) BatchDeleteExpired(ctx interface{}, before interface{}, batchSize interface{}) *MockAuthSessionRepository_BatchDeleteExpired_Call {
	return &MockAuthSessionRepository_BatchDeleteExpired_Call{Call: _e.mock.On("BatchDeleteExpired", ctx, before, batchSize)}
}

func (_c *MockAuthSessionRepository_BatchDeleteExpired_Call) Run(run func(ctx context.Context, before time.Time, batchSize int)) *MockAuthSessionRepository_BatchDeleteExpired_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Time), args[2].(int))
	})
	return _c
}

func (_c *MockAuthSessionRepository_BatchDeleteExpired_Call) Return(_a0 int64, _a1 error) *MockAuthSessionRepository_BatchDeleteExpired_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthSessionRepository_BatchDeleteExpired_Call) RunAndReturn(run func(context.Context, time.Time, int) (int64, error)) *MockAuthSessionRepository_BatchDeleteExpired_Call {
	_c.Call.Return(run)
	return _c
}

// CountByUserID provides a mock function with given fields: ctx, userID
func (_m *MockAuthSessionRepository) CountByUserID(ctx context.Context, userID entity.ID) (int64, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for CountByUserID")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.ID) (int64, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.ID) int64); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.ID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthSessionRepository_CountByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountByUserID'
type MockAuthSessionRepository_CountByUserID_Call struct {
	*mock.Call
}

// CountByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID entity.ID
func (_e *MockAuthSessionRepository_Expecter) CountByUserID(ctx interface{}, userID interface{}) *MockAuthSessionRepository_CountByUserID_Call {
	return &MockAuthSessionRepository_CountByUserID_Call{Call: _e.mock.On("CountByUserID", ctx, userID)}
}

func (_c *MockAuthSessionRepository_CountByUserID_Call) Run(run func(ctx context.Context, userID entity.ID)) *MockAuthSessionRepository_CountByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.ID))
	})
	return _c
}

func (_c *MockAuthSessionRepository_CountByUserID_Call) Return(_a0 int64, _a1 error) *MockAuthSessionRepository_CountByUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthSessionRepository_CountByUserID_Call) RunAndReturn(run func(context.Context, entity.ID) (int64, error)) *MockAuthSessionRepository_CountByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, session
func (_m *MockAuthSessionRepository) Create(ctx context.Context, session *entity.AuthSession) error {
	ret := _m.Called(ctx, session)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.AuthSession) error); ok {
		r0 = rf(ctx, session)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuthSessionRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockAuthSessionRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - session *entity.AuthSession
func (_e *MockAuthSessionRepository_Expecter) Create(ctx interface{}, session interface{}) *MockAuthSessionRepository_Create_Call {
	return &MockAuthSessionRepository_Create_Call{Call: _e.mock.On("Create", ctx, session)}
}

func (_c *MockAuthSessionRepository_Create_Call) Run(run func(ctx context.Context, session *entity.AuthSession)) *MockAuthSessionRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.AuthSession))
	})
	return _c
}

func (_c *MockAuthSessionRepository_Create_Call) Return(_a0 error) *MockAuthSessionRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthSessionRepository_Create_Call) RunAndReturn(run func(context.Context, *entity.AuthSession) error) *MockAuthSessionRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAllByUserID provides a mock function with given fields: ctx, userID
func (_m *MockAuthSessionRepository) DeleteAllByUserID(ctx context.Context, userID entity.ID) error {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAllByUserID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.ID) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuthSessionRepository_DeleteAllByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAllByUserID'
type MockAuthSessionRepository_DeleteAllByUserID_Call struct {
	*mock.Call
}

// DeleteAllByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID entity.ID
func (_e *MockAuthSessionRepository_Expecter) DeleteAllByUserID(ctx interface{}, userID interface{}) *MockAuthSessionRepository_DeleteAllByUserID_Call {
	return &MockAuthSessionRepository_DeleteAllByUserID_Call{Call: _e.mock.On("DeleteAllByUserID", ctx, userID)}
}

func (_c *MockAuthSessionRepository_DeleteAllByUserID_Call) Run(run func(ctx context.Context, userID entity.ID)) *MockAuthSessionRepository_DeleteAllByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.ID))
	})
	return _c
}

func (_c *MockAuthSessionRepository_DeleteAllByUserID_Call) Return(_a0 error) *MockAuthSessionRepository_DeleteAllByUserID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthSessionRepository_DeleteAllByUserID_Call) RunAndReturn(run func(context.Context, entity.ID) error) *MockAuthSessionRepository_DeleteAllByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAllExcept provides a mock function with given fields: ctx, userID, sessionID
func (_m *MockAuthSessionRepository) DeleteAllExcept(ctx context.Context, userID entity.ID, sessionID entity.ID) (int64, error) {
	ret := _m.Called(ctx, userID, sessionID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAllExcept")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.ID, entity.ID) (int64, error)); ok {
		return rf(ctx, userID, sessionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.ID, entity.ID) int64); ok {
		r0 = rf(ctx, userID, sessionID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.ID, entity.ID) error); ok {
		r1 = rf(ctx, userID, sessionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthSessionRepository_DeleteAllExcept_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAllExcept'
type MockAuthSessionRepository_DeleteAllExcept_Call struct {
	*mock.Call
}

// DeleteAllExcept is a helper method to define mock.On call
//   - ctx context.Context
//   - userID entity.ID
//   - sessionID entity.ID
func (_e *MockAuthSessionRepository_Expecter) DeleteAllExcept(ctx interface{}, userID interface{}, sessionID interface{}) *MockAuthSessionRepository_DeleteAllExcept_Call {
	return &MockAuthSessionRepository_DeleteAllExcept_Call{Call: _e.mock.On("DeleteAllExcept", ctx, userID, sessionID)}
}

func (_c *MockAuthSessionRepository_DeleteAllExcept_Call) Run(run func(ctx context.Context, userID entity.ID, sessionID entity.ID)) *MockAuthSessionRepository_DeleteAllExcept_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.ID), args[2].(entity.ID))
	})
	return _c
}

func (_c *MockAuthSessionRepository_DeleteAllExcept_Call) Return(_a0 int64, _a1 error) *MockAuthSessionRepository_DeleteAllExcept_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthSessionRepository_DeleteAllExcept_Call) RunAndReturn(run func(context.Context, entity.ID, entity.ID) (int64, error)) *MockAuthSessionRepository_DeleteAllExcept_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByID provides a mock function with given fields: ctx, id
func (_m *MockAuthSessionRepository) DeleteByID(ctx context.Context, id entity.ID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.ID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuthSessionRepository_DeleteByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByID'
type MockAuthSessionRepository_DeleteByID_Call struct {
	*mock.Call
}

// DeleteByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id entity.ID
func (_e *MockAuthSessionRepository_Expecter) DeleteByID(ctx interface{}, id interface{}) *MockAuthSessionRepository_DeleteByID_Call {
	return &MockAuthSessionRepository_DeleteByID_Call{Call: _e.mock.On("DeleteByID", ctx, id)}
}

func (_c *MockAuthSessionRepository_DeleteByID_Call) Run(run func(ctx context.Context, id entity.ID)) *MockAuthSessionRepository_DeleteByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.ID))
	})
	return _c
}

func (_c *MockAuthSessionRepository_DeleteByID_Call) Return(_a0 error) *MockAuthSessionRepository_DeleteByID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthSessionRepository_DeleteByID_Call) RunAndReturn(run func(context.Context, entity.ID) error) *MockAuthSessionRepository_DeleteByID_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteExpired provides a mock function with given fields: ctx, before
func (_m *MockAuthSessionRepository) DeleteExpired(ctx context.Context, before time.Time) error {
	ret := _m.Called(ctx, before)

	if len(ret) == 0 {
		panic("no return value specified for DeleteExpired")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) error); ok {
		r0 = rf(ctx, before)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuthSessionRepository_DeleteExpired_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteExpired'
type MockAuthSessionRepository_DeleteExpired_Call struct {
	*mock.Call
}

// DeleteExpired is a helper method to define mock.On call
//   - ctx context.Context
//   - before time.Time
func (_e *MockAuthSessionRepository_Expecter) DeleteExpired(ctx interface{}, before interface{}) *MockAuthSessionRepository_DeleteExpired_Call {
	return &MockAuthSessionRepository_DeleteExpired_Call{Call: _e.mock.On("DeleteExpired", ctx, before)}
}

func (_c *MockAuthSessionRepository_DeleteExpired_Call) Run(run func(ctx context.Context, before time.Time)) *MockAuthSessionRepository_DeleteExpired_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Time))
	})
	return _c
}

func (_c *MockAuthSessionRepository_DeleteExpired_Call) Return(_a0 error) *MockAuthSessionRepository_DeleteExpired_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthSessionRepository_DeleteExpired_Call) RunAndReturn(run func(context.Context, time.Time) error) *MockAuthSessionRepository_DeleteExpired_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOldestByUserID provides a mock function with given fields: ctx, userID
func (_m *MockAuthSessionRepository) DeleteOldestByUserID(ctx context.Context, userID entity.ID) error {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOldestByUserID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.ID) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuthSessionRepository_DeleteOldestByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOldestByUserID'
type MockAuthSessionRepository_DeleteOldestByUserID_Call struct {
	*mock.Call
}

// DeleteOldestByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID entity.ID
func (_e *MockAuthSessionRepository_Expecter) DeleteOldestByUserID(ctx interface{}, userID interface{}) *MockAuthSessionRepository_DeleteOldestByUserID_Call {
	return &MockAuthSessionRepository_DeleteOldestByUserID_Call{Call: _e.mock.On("DeleteOldestByUserID", ctx, userID)}
}

func (_c *MockAuthSessionRepository_DeleteOldestByUserID_Call) Run(run func(ctx context.Context, userID entity.ID)) *MockAuthSessionRepository_DeleteOldestByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.ID))
	})
	return _c
}

func (_c *MockAuthSessionRepository_DeleteOldestByUserID_Call) Return(_a0 error) *MockAuthSessionRepository_DeleteOldestByUserID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthSessionRepository_DeleteOldestByUserID_Call) RunAndReturn(run func(context.Context, entity.ID) error) *MockAuthSessionRepository_DeleteOldestByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// EnsureSessionLimit provides a mock function with given fields: ctx, userID, limit
func (_m *MockAuthSessionRepository) EnsureSessionLimit(ctx context.Context, userID entity.ID, limit int64) error {
	ret := _m.Called(ctx, userID, limit)

	if len(ret) == 0 {
		panic("no return value specified for EnsureSessionLimit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.ID, int64) error); ok {
		r0 = rf(ctx, userID, limit)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuthSessionRepository_EnsureSessionLimit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnsureSessionLimit'
type MockAuthSessionRepository_EnsureSessionLimit_Call struct {
	*mock.Call
}

// EnsureSessionLimit is a helper method to define mock.On call
//   - ctx context.Context
//   - userID entity.ID
//   - limit int64
func (_e *MockAuthSessionRepository_Expecter) EnsureSessionLimit(ctx interface{}, userID interface{}, limit interface{}) *MockAuthSessionRepository_EnsureSessionLimit_Call {
	return &MockAuthSessionRepository_EnsureSessionLimit_Call{Call: _e.mock.On("EnsureSessionLimit", ctx, userID, limit)}
}

func (_c *MockAuthSessionRepository_EnsureSessionLimit_Call) Run(run func(ctx context.Context, userID entity.ID, limit int64)) *MockAuthSessionRepository_EnsureSessionLimit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.ID), args[2].(int64))
	})
	return _c
}

func (_c *MockAuthSessionRepository_EnsureSessionLimit_Call) Return(_a0 error) *MockAuthSessionRepository_EnsureSessionLimit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthSessionRepository_EnsureSessionLimit_Call) RunAndReturn(run func(context.Context, entity.ID, int64) error) *MockAuthSessionRepository_EnsureSessionLimit_Call {
	_c.Call.Return(run)
	return _c
}

// ExecuteInTransaction provides a mock function with given fields: ctx, fn
func (_m *MockAuthSessionRepository) ExecuteInTransaction(ctx context.Context, fn func(repository.AuthSessionRepository) error) error {
	ret := _m.Called(ctx, fn)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteInTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(repository.AuthSessionRepository) error) error); ok {
		r0 = rf(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuthSessionRepository_ExecuteInTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteInTransaction'
type MockAuthSessionRepository_ExecuteInTransaction_Call struct {
	*mock.Call
}

// ExecuteInTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - fn func(repository.AuthSessionRepository) error
func (_e *MockAuthSessionRepository_Expecter) ExecuteInTransaction(ctx interface{}, fn interface{}) *MockAuthSessionRepository_ExecuteInTransaction_Call {
	return &MockAuthSessionRepository_ExecuteInTransaction_Call{Call: _e.mock.On("ExecuteInTransaction", ctx, fn)}
}

func (_c *MockAuthSessionRepository_ExecuteInTransaction_Call) Run(run func(ctx context.Context, fn func(repository.AuthSessionRepository) error)) *MockAuthSessionRepository_ExecuteInTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(repository.AuthSessionRepository) error))
	})
	return _c
}

func (_c *MockAuthSessionRepository_ExecuteInTransaction_Call) Return(_a0 error) *MockAuthSessionRepository_ExecuteInTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthSessionRepository_ExecuteInTransaction_Call) RunAndReturn(run func(context.Context, func(repository.AuthSessionRepository) error) error) *MockAuthSessionRepository_ExecuteInTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// GetByRefreshToken provides a mock function with given fields: ctx, refreshToken
func (_m *MockAuthSessionRepository) GetByRefreshToken(ctx context.Context, refreshToken string) (*entity.AuthSession, error) {
	ret := _m.Called(ctx, refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for GetByRefreshToken")
	}

	var r0 *entity.AuthSession
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.AuthSession, error)); ok {
		return rf(ctx, refreshToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.AuthSession); ok {
		r0 = rf(ctx, refreshToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.AuthSession)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, refreshToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthSessionRepository_GetByRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByRefreshToken'
type MockAuthSessionRepository_GetByRefreshToken_Call struct {
	*mock.Call
}

// GetByRefreshToken is a helper method to define mock.On call
//   - ctx context.Context
//   - refreshToken string
func (_e *MockAuthSessionRepository_Expecter) GetByRefreshToken(ctx interface{}, refreshToken interface{}) *MockAuthSessionRepository_GetByRefreshToken_Call {
	return &MockAuthSessionRepository_GetByRefreshToken_Call{Call: _e.mock.On("GetByRefreshToken", ctx, refreshToken)}
}

func (_c *MockAuthSessionRepository_GetByRefreshToken_Call) Run(run func(ctx context.Context, refreshToken string)) *MockAuthSessionRepository_GetByRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAuthSessionRepository_GetByRefreshToken_Call) Return(_a0 *entity.AuthSession, _a1 error) *MockAuthSessionRepository_GetByRefreshToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthSessionRepository_GetByRefreshToken_Call) RunAndReturn(run func(context.Context, string) (*entity.AuthSession, error)) *MockAuthSessionRepository_GetByRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// GetByUserID provides a mock function with given fields: ctx, userID
func (_m *MockAuthSessionRepository) GetByUserID(ctx context.Context, userID entity.ID) ([]*entity.AuthSession, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetByUserID")
	}

	var r0 []*entity.AuthSession
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.ID) ([]*entity.AuthSession, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.ID) []*entity.AuthSession); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.AuthSession)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.ID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthSessionRepository_GetByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByUserID'
type MockAuthSessionRepository_GetByUserID_Call struct {
	*mock.Call
}

// GetByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID entity.ID
func (_e *MockAuthSessionRepository_Expecter) GetByUserID(ctx interface{}, userID interface{}) *MockAuthSessionRepository_GetByUserID_Call {
	return &MockAuthSessionRepository_GetByUserID_Call{Call: _e.mock.On("GetByUserID", ctx, userID)}
}

func (_c *MockAuthSessionRepository_GetByUserID_Call) Run(run func(ctx context.Context, userID entity.ID)) *MockAuthSessionRepository_GetByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.ID))
	})
	return _c
}

func (_c *MockAuthSessionRepository_GetByUserID_Call) Return(_a0 []*entity.AuthSession, _a1 error) *MockAuthSessionRepository_GetByUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthSessionRepository_GetByUserID_Call) RunAndReturn(run func(context.Context, entity.ID) ([]*entity.AuthSession, error)) *MockAuthSessionRepository_GetByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByUserIDAndUserAgent provides a mock function with given fields: ctx, userID, userAgent
func (_m *MockAuthSessionRepository) GetByUserIDAndUserAgent(ctx context.Context, userID entity.ID, userAgent string) (*entity.AuthSession, error) {
	ret := _m.Called(ctx, userID, userAgent)

	if len(ret) == 0 {
		panic("no return value specified for GetByUserIDAndUserAgent")
	}

	var r0 *entity.AuthSession
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.ID, string) (*entity.AuthSession, error)); ok {
		return rf(ctx, userID, userAgent)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.ID, string) *entity.AuthSession); ok {
		r0 = rf(ctx, userID, userAgent)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.AuthSession)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.ID, string) error); ok {
		r1 = rf(ctx, userID, userAgent)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthSessionRepository_GetByUserIDAndUserAgent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByUserIDAndUserAgent'
type MockAuthSessionRepository_GetByUserIDAndUserAgent_Call struct {
	*mock.Call
}

// GetByUserIDAndUserAgent is a helper method to define mock.On call
//   - ctx context.Context
//   - userID entity.ID
//   - userAgent string
func (_e *MockAuthSessionRepository_Expecter) GetByUserIDAndUserAgent(ctx interface{}, userID interface{}, userAgent interface{}) *MockAuthSessionRepository_GetByUserIDAndUserAgent_Call {
	return &MockAuthSessionRepository_GetByUserIDAndUserAgent_Call{Call: _e.mock.On("GetByUserIDAndUserAgent", ctx, userID, userAgent)}
}

func (_c *MockAuthSessionRepository_GetByUserIDAndUserAgent_Call) Run(run func(ctx context.Context, userID entity.ID, userAgent string)) *MockAuthSessionRepository_GetByUserIDAndUserAgent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.ID), args[2].(string))
	})
	return _c
}

func (_c *MockAuthSessionRepository_GetByUserIDAndUserAgent_Call) Return(_a0 *entity.AuthSession, _a1 error) *MockAuthSessionRepository_GetByUserIDAndUserAgent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthSessionRepository_GetByUserIDAndUserAgent_Call) RunAndReturn(run func(context.Context, entity.ID, string) (*entity.AuthSession, error)) *MockAuthSessionRepository_GetByUserIDAndUserAgent_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, session
func (_m *MockAuthSessionRepository) Update(ctx context.Context, session *entity.AuthSession) error {
	ret := _m.Called(ctx, session)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.AuthSession) error); ok {
		r0 = rf(ctx, session)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuthSessionRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockAuthSessionRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - session *entity.AuthSession
func (_e *MockAuthSessionRepository_Expecter) Update(ctx interface{}, session interface{}) *MockAuthSessionRepository_Update_Call {
	return &MockAuthSessionRepository_Update_Call{Call: _e.mock.On("Update", ctx, session)}
}

func (_c *MockAuthSessionRepository_Update_Call) Run(run func(ctx context.Context, session *entity.AuthSession)) *MockAuthSessionRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.AuthSession))
	})
	return _c
}

func (_c *MockAuthSessionRepository_Update_Call) Return(_a0 error) *MockAuthSessionRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthSessionRepository_Update_Call) RunAndReturn(run func(context.Context, *entity.AuthSession) error) *MockAuthSessionRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAuthSessionRepository creates a new instance of MockAuthSessionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthSessionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthSessionRepository {
	mock := &MockAuthSessionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
